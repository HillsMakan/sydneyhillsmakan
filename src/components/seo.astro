---
import type { CollectionEntry } from 'astro:content'
import { SEO } from 'astro-seo'
import { getImage } from 'astro:assets'
import type {
  Article,
  BreadcrumbList,
  Organization,
  Person,
  WebSite,
  WithContext
} from 'schema-dts'
import Site from '../site.ts'
export interface Props {
  frontmatter: CollectionEntry<'pages'>['data'] | CollectionEntry<'partner'>['data']
}

const { frontmatter } = Astro.props

const siteurl = new URL(import.meta.env.BASE_URL, Astro.url)
const type = 'page'
const year = Site.buildTime.getFullYear()
const image = await getImage({
  src: frontmatter.image || Site.image,
  width: 1200,
  format: 'jpg'
})
const openGraph = {
  basic: {
    title: frontmatter.title,
    type: 'website',
    image: new URL(image.src, Astro.url).toString()
  },
  optional: {
    description: frontmatter.description,
    siteName: Site.title
  },
  image: {
    alt: frontmatter.title,
    height: image.attributes.height,
    width: image.attributes.width
  },
  article: {
    author: Site.author.url,
    publishedTime: Site.buildTime.toISOString()
  }
}

const website: WithContext<WebSite> = {
  '@context': 'https://schema.org',
  '@type': 'WebSite',
  about: {
    '@id': new URL('about', siteurl).toString()
  },
  audience: 'public',
  abstract: Site.description,
  author: {
    '@id': Site.author.url
  },
  copyrightHolder: {
    '@id': Site.org.url
  },
  copyrightYear: year,
  creator: {
    '@id': Site.author.url
  },
  description: Site.description,
  image: {
    '@type': 'ImageObject',
    url: new URL(image.src, Astro.url).toString()
  },
  inLanguage: 'en',
  name: Site.title,
  publisher: {
    '@id': Site.org.url
  },
  url: siteurl.toString()
}

const organization: WithContext<Organization> = {
  '@context': 'https://schema.org',
  '@id': Site.org.url,
  '@type': 'Organization',
  address: Site.location,
  contactPoint: {
    '@type': 'ContactPoint',
    email: Site.org.email
  },
  description: Site.org.summary,
  email: Site.org.email,
  founder: {
    '@id': Site.author.email
  },
  location: Site.location,
  image: {
    '@type': 'ImageObject',
    url: new URL(Site.logo.src, siteurl).toString()
  },
  logo: {
    '@type': 'ImageObject',
    url: new URL(Site.logo.src, siteurl).toString()
  },
  name: Site.org.name,
  url: Site.org.url
}

const breadcrumbList: WithContext<BreadcrumbList> = {
  '@context': 'https://schema.org',
  '@type': 'BreadcrumbList',
  description: 'Breadcrumbs list',
  itemListElement: [
    {
      '@type': 'ListItem',
      item: {
        '@id': siteurl.toString(),
        name: Site.title
      },
      position: 1
    },
    {
      '@type': 'ListItem',
      item: {
        '@id': Astro.url.toString(),
        name: frontmatter.title
      },
      position: 2
    }
  ],
  numberOfItems: 2,
  name: 'Breadcrumbs'
}

const person: WithContext<Person> = {
  '@context': 'https://schema.org',
  '@type': 'Person',
  '@id': Site.author.url,
  name: Site.author.name,
  url: Site.author.url,
  worksFor: {
    '@id': Site.org.url
  }
}

const article: WithContext<Article> = {
  '@context': 'https://schema.org',
  '@type': 'Article',
  articleSection: type,
  author: {
    '@id': Site.author.url
  },
  copyrightHolder: {
    '@id': Site.org.url
  },
  copyrightYear: year,
  creativeWorkStatus: 'Published',
  creator: {
    '@id': Site.author.url
  },
  dateCreated: Site.buildTime.toISOString(),
  dateModified: Site.buildTime.toISOString(),
  datePublished: Site.buildTime.toISOString(),
  description: frontmatter.description,
  headline: frontmatter.title,
  image: {
    '@type': 'ImageObject',
    url: new URL(image.src, Astro.url).toString()
  },
  inLanguage: 'en',
  mainEntityOfPage: Site.org.url,
  name: frontmatter.title,
  publisher: {
    '@id': Site.org.url
  },
  url: siteurl.toString()
}
---

<SEO
  title={Site.title + ' | ' + frontmatter.title}
  description={frontmatter.description}
  {openGraph}
/>
<script is:inline set:html={JSON.stringify(website)} type="application/ld+json" />
<script is:inline set:html={JSON.stringify(organization)} type="application/ld+json" />
<script is:inline set:html={JSON.stringify(breadcrumbList)} type="application/ld+json" />
<script is:inline set:html={JSON.stringify(person)} type="application/ld+json" />
<script is:inline set:html={JSON.stringify(article)} type="application/ld+json" />
