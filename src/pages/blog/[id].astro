---
import type { CollectionEntry } from 'astro:content'
import { getCollection, render } from 'astro:content'
import Layout from '../../layouts/blog.astro'

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  let posts = await getCollection('blog', ({ data }) => {
    return data.draft !== true
  })
  posts = posts.sort((a, b) =>
    a.data.pubDate && b.data.pubDate ? +b.data.pubDate - +a.data.pubDate : 0
  )
  return posts.map((post, i) => ({
    params: { id: post.id },
    props: {
      post,
      prev: i > 0 ? posts[i - 1] : undefined,
      next: i < posts.length - 1 ? posts[i + 1] : undefined
    }
  }))
}

export interface Props {
  post: CollectionEntry<'blog'>
  prev: CollectionEntry<'blog'>
  next: CollectionEntry<'blog'>
}

// 2. When its time to render, you can get the entry directly from the prop
const { post, prev, next } = Astro.props

// @ts-ignore
const { Content, remarkPluginFrontmatter } = await render(post)
let fixedpost = post
const rfrontmatter = remarkPluginFrontmatter as CollectionEntry<'blog'>['data']
if (rfrontmatter) {
  fixedpost.data.minutesRead = rfrontmatter.minutesRead
}
---

<Layout post={fixedpost} {prev} {next}>
  <Content />
</Layout>
